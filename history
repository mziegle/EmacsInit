;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(query-replace-history anzu--history org-tags-history ivy-history org-refile-history read-expression-history minibuffer-history helm-M-x-input-history))
(setq query-replace-history '("s" "p" "t" "p" "t" "p"))
(setq org-tags-history '(":drill:"))
(setq read-expression-history '("(insert (jp/replace-with-hiragana \"ni juu roku sai desu\"))" "(file (message \"\\\"%s\\\"\" (org-file-path \"Vocabulary.org\"))) " "(file)" "(file (org-file-path \"Vocabulary.org\"))" "(insert (org-file-path \"Vocabulary.org\"))" "(message \"%s\" (concat (file-name-as-directory org-directory) \"Vocabulary.org\"))" "(string \"test\")" "(string 'test)" "(string test)" "(string 1)" "(insert (org-file-path \"Vocabulary.org\"))" "org-directory" "(jp/japanese-get-word jp/japanese-word)" "(jp/japanese-prompt)" "(find-file (org-file-path \"Vocabulary.org\"))" "(find-file (org-file-path \"Vocabulary\"))" "(find-file (org-file-path \"Vocabulary))" "(org-file-path \"Vocabulary.org\")" "(concat \"a\" \" / \" \"b\")" "(string \"a\" \" / \" \"b\")"))
(setq minibuffer-history '("head" "atama" "Noun" "finger" "yubi" "Noun" "foot / leg" "ashi" "Noun" "hand" "te" "Noun" "face" "kao" "Noun" "nose" "hana" "Noun" "ear" "mimi" "Noun" "mini" "Noun" "eye" "me" "Noun" "mouth" "kuchi" "Noun" "Good night" "Oyasuminasai" "Phrase" "Good morning" "Ohayou gozaimasu" "Phrase" "What is your name?" "Onamae wa nan desu ka" "Phrase" "I am Marc" "Marc to moushimasu" "Phrase" "Nice to meet you" "hajimemashite" "Phrase" #("jp/" 0 3 (ws-butler-chg chg)) "You look 26 years old" "ni juu roku sai ni miemasu" "Phrase" "How old do I look?" "nansai ni miemasu ka" "Phrase" "I am 26 years old" "ni yuu roku sai desu" "Phrase" #("multisided" 0 10 (fontified t face org-property-value)) "How old are you?" "Nansai desu ka" "Phrase" "8000" "hassen" "Noun" "3000" "san zen" "Noun" "1000" "sen, issen" "Noun" "800" "happyaku" "Noun" "600" "roppyaku" "Noun" #("position" 0 8 (fontified t org-category "todo" face org-level-3)) "happyaku" "roppyaku" "Noun" "300" "san byaku" "Noun" "100" "hyaku" "Noun" "10" "juu" "Noun" "9" "kyuu" "Noun" "8" "hachi" "Noun" "7" "nana" "Noun" "6" "roku" "Noun" "5" "go"))
(setq helm-M-x-input-history '(
;;;  #("Unstaged" 0 8 (face magit-section-heading ws-butler-chg chg magit-section #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#3 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) unstaged nil #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#4 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) status nil #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil nil nil (#s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#6 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) branch "master" #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-headers-hook magit-insert-head-branch-header) (magit-status-sections-hook magit-insert-status-headers)) #3 (#s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) branch #("origin/master" 0 13 (face magit-branch-remote)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-headers-hook magit-insert-upstream-branch-header) (magit-status-sections-hook magit-insert-status-headers)) #5 nil))) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#6 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) untracked nil #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-untracked-files)) #3 (#s(#s(eieio--class magit-file-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#10 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor source nil t nil) #s(cl-slot-descriptor header nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 source 12 header 13)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) file "server/" #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-untracked-files)) #5 nil nil nil))) #2 #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#6 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) unpushed "@{upstream}.." #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> t nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #3 (#s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit "a127d96" #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("1245b2e" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("c4aed3e" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("00f307c" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("e586445" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("a29c1a3" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("d283433" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("bb04a9b" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("40e7622" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil) #s(#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#8 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) commit #("4388e0c" 0 1 (ws-butler-chg delete)) #<marker (moves after insertion) at 65651 in magit: .emacs.d> nil #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unpushed-to-upstream-or-recent)) #5 nil))))) (#s(#s(eieio--class magit-file-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor source nil t nil) #s(cl-slot-descriptor header nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 source 12 header 13)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#5 nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) file "configuration.el" #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> t nil nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #2 (#s(#s(eieio--class magit-hunk-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#9 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor refined nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 refined 12)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) hunk (nil "-112,12" "+112,6") #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil magit-diff-paint-hunk nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #4 nil nil) #s(#s(eieio--class magit-hunk-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#9 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor refined nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 refined 12)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) hunk (nil "-723,7" "+717,7") #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil magit-diff-paint-hunk nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #4 nil nil)) nil "diff --git configuration.el configuration.el
;;; index 47a9ec6..370e5eb 100644
;;; --- configuration.el
;;; +++ configuration.el
;;; ") #s(#s(eieio--class magit-file-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor source nil t nil) #s(cl-slot-descriptor header nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 source 12 header 13)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#5 nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) file "history" #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil nil nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #2 nil nil "diff --git history history
;;; index ff8b66c..4019ef5 100644
;;; Binary files history and history differ
;;; ") #s(#s(eieio--class magit-file-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor source nil t nil) #s(cl-slot-descriptor header nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 source 12 header 13)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#5 nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) file "mz-functions/learnjapanese.el" #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> t nil nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #2 (#s(#s(eieio--class magit-hunk-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#9 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor refined nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 refined 12)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) hunk (nil "-2,7" "+2,8") #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil magit-diff-paint-hunk nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #4 nil nil) #s(#s(eieio--class magit-hunk-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#9 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor refined nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 refined 12)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) hunk (nil "-31,7" "+32,7") #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil magit-diff-paint-hunk nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #4 nil nil) #s(#s(eieio--class magit-hunk-section nil (#s(eieio--class magit-section nil nil [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11)) (magit-hunk-section magit-file-section) ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#9 nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil))) [#s(cl-slot-descriptor type nil t nil) #s(cl-slot-descriptor value nil t nil) #s(cl-slot-descriptor start nil t nil) #s(cl-slot-descriptor content nil t nil) #s(cl-slot-descriptor end nil t nil) #s(cl-slot-descriptor hidden nil t nil) #s(cl-slot-descriptor washer nil t nil) #s(cl-slot-descriptor process nil t nil) #s(cl-slot-descriptor heading-highlight-face nil t nil) #s(cl-slot-descriptor inserter (symbol-value 'magit--current-section-hook) t nil) #s(cl-slot-descriptor parent nil t nil) #s(cl-slot-descriptor children nil t nil) #s(cl-slot-descriptor refined nil t nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (type 0 value 1 start 2 content 3 end 4 hidden 5 washer 6 process 7 heading-highlight-face 8 inserter 9 parent 10 children 11 refined 12)) nil ((:type . type) (:value . value) (:start . start) (:parent . parent)) [] [] #s(#7 nil nil nil nil nil nil nil nil nil nil nil nil nil) (:custom-groups nil)) hunk (nil "-43,7" "+44,7") #<marker (moves after insertion) at 65651 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> #<marker at 1 in magit: .emacs.d> nil magit-diff-paint-hunk nil nil ((magit-status-sections-hook magit-insert-unstaged-changes)) #4 nil nil)) nil #("diff --git mz-functions/learnjapanese.el mz-functions/learnjapanese.el
;;; index ca9d5c5..89cc53c 100644
;;; --- mz-functions/learnjapanese.el
;;; +++ mz-functions/learnjapanese.el
;;; " 0 1 (ws-butler-chg delete))))) keymap (keymap (117 . magit-unstage) (115 . magit-stage) (remap keymap (magit-delete-thing . magit-discard) (magit-visit-thing . magit-diff-unstaged)))))
 "jp/" #("**" 0 1 (org-category "Vocabulary" fontified t ws-butler-chg chg face (:foreground "gray2") keymap (keymap)) 1 2 (org-category "Vocabulary" fontified t ws-butler-chg chg composition (1 1 [9675]) keymap (keymap) face org-level-2)) "org dri" #("<2018-08-23" 0 11 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) face org-date)) "org dri" #("Example" 0 7 (fontified t face org-level-3)) "rel" "case" "capi" "org dri" #("%" 0 1 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t help-echo nil fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) #("mz/indent-template" 0 1 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 1 2 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 2 3 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 3 4 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 4 5 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 5 6 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 6 7 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 7 8 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 8 9 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 9 10 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 10 11 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 11 12 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 12 13 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 13 14 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 14 15 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 15 16 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 16 17 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 17 18 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) #("file+headline" 0 4 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 4 5 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 5 6 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 6 7 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 7 8 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 8 9 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 9 10 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 10 11 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 11 12 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil) 12 13 (font-lock-fontified t prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t help-echo nil font-lock-multiline t face (org-block) composition nil)) "org demot" #("%s" 0 1 (fontified t font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 1 2 (fontified t font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) "emacs re" "find function" "function point" "yas insert" "ema" "mz" "org drill" "org capture" "emacs rel" "eval" "find v" "find fu" "find function" #("file+header" 0 4 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 4 5 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 5 6 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 6 7 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 7 8 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 8 9 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 9 10 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 10 11 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) #("$" 0 1 (composition nil face (font-lock-string-face org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) #("file" 0 4 (composition nil face (org-block) font-lock-multiline t src-block t fontified t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) #("Vocabulary" 0 1 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 1 2 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 2 3 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 3 4 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 4 5 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 5 6 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 6 7 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 7 8 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 8 9 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 9 10 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) #("PROPERTIES" 0 10 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) "emacs-re" "print pa" "list" "list pa" #("org-file-path" 0 13 (composition nil face (org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) "expand region" "zone" "irc"))
(setq org-drill-sm5-optimal-factor-matrix '((1 (2.5 . 4.0) (2.6 . 4.07))))
