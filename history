;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-capture--prompt-history org-read-date-history reftex-cite-regexp-hist query-replace-history anzu--history org-tags-history ivy-history org-refile-history read-expression-history minibuffer-history helm-M-x-input-history))
(setq org-capture--prompt-history '(#("Summer Party" 0 12 (ws-butler-chg chg))))
(setq org-read-date-history '("   08-28 18:30    " "28 18:30    " "09-09 19:00    " "09-04 12:00    " "27 10:00    "))
(setq query-replace-history '("s" "p" "t" "p" "t" "p"))
(setq org-tags-history '("work" "work party" "work meeting party" "work presentation" ":drill:"))
(setq read-expression-history '("(insert (jp/replace-with-hiragana \"ni juu roku sai desu\"))" "(file (message \"\\\"%s\\\"\" (org-file-path \"Vocabulary.org\"))) " "(file)" "(file (org-file-path \"Vocabulary.org\"))" "(insert (org-file-path \"Vocabulary.org\"))" "(message \"%s\" (concat (file-name-as-directory org-directory) \"Vocabulary.org\"))" "(string \"test\")" "(string 'test)" "(string test)" "(string 1)" "(insert (org-file-path \"Vocabulary.org\"))" "org-directory" "(jp/japanese-get-word jp/japanese-word)" "(jp/japanese-prompt)" "(find-file (org-file-path \"Vocabulary.org\"))" "(find-file (org-file-path \"Vocabulary\"))" "(find-file (org-file-path \"Vocabulary))" "(org-file-path \"Vocabulary.org\")" "(concat \"a\" \" / \" \"b\")" "(string \"a\" \" / \" \"b\")"))
(setq minibuffer-history '("ndays" "a" "emacs" "sc" "c:/zieglemc/Stuff/ToDo/" "archive.org<2>" "c:/zieglemc/Stuff/ToDo/" "how-to.org" "c:/zieglemc/Stuff/ToDo/ho" "c:/zieglemc/Stuff/ToDo/a" "*helm M-x*" "agenda.org" "c:/zieglemc/Stuff/ToDo/age" "" "c:/zieglemc/.emacs.d/cof" "head" "atama" "Noun" "finger" "yubi" "Noun" "foot / leg" "ashi" "Noun" "hand" "te" "Noun" "face" "kao" "Noun" "nose" "hana" "Noun" "ear" "mimi" "Noun" "mini" "Noun" "eye" "me" "Noun" "mouth" "kuchi" "Noun" "Good night" "Oyasuminasai" "Phrase" "Good morning" "Ohayou gozaimasu" "Phrase" "What is your name?" "Onamae wa nan desu ka" "Phrase" "I am Marc" "Marc to moushimasu" "Phrase" "Nice to meet you" "hajimemashite" "Phrase" #("jp/" 0 3 (ws-butler-chg chg)) "You look 26 years old" "ni juu roku sai ni miemasu" "Phrase" "How old do I look?" "nansai ni miemasu ka" "Phrase" "I am 26 years old" "ni yuu roku sai desu" "Phrase" #("multisided" 0 10 (face org-property-value fontified t)) "How old are you?" "Nansai desu ka" "Phrase" "8000" "hassen" "Noun" "3000" "san zen" "Noun" "1000" "sen, issen" "Noun" "800" "happyaku" "Noun" "600" "roppyaku" "Noun" #("position" 0 8 (face org-level-3 org-category "todo" fontified t)) "happyaku" "roppyaku" "Noun" "300" "san byaku" "Noun" "100" "hyaku" "Noun" "10" "juu"))
(setq helm-M-x-input-history '("org-time" #("org-time-stamp" 0 14 (fontified t font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) "org date" "list pa" "org spar" "emacs re" "org cita" "jp/" #("**" 0 1 (keymap (keymap) face (:foreground "gray2") ws-butler-chg chg fontified t org-category "Vocabulary") 1 2 (face org-level-2 keymap (keymap) composition (1 1 [9675]) ws-butler-chg chg fontified t org-category "Vocabulary")) "org dri" #("<2018-08-23" 0 11 (face org-date keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t)) "org dri" #("Example" 0 7 (face org-level-3 fontified t)) "rel" "case" "capi" "org dri" #("%" 0 1 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t help-echo nil src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t)) #("mz/indent-template" 0 1 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 1 2 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 2 3 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 3 4 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 4 5 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 5 6 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 6 7 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 7 8 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 8 9 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 9 10 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 10 11 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 11 12 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 12 13 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 13 14 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 14 15 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 15 16 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 16 17 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t) 17 18 (composition nil face (font-lock-string-face org-block) font-lock-multiline t fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t)) #("file+headline" 0 4 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 4 5 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 5 6 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 6 7 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 7 8 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 8 9 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 9 10 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 10 11 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 11 12 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t) 12 13 (composition nil face (org-block) font-lock-multiline t help-echo nil fontified t src-block t prettify-symbols-end nil prettify-symbols-start nil font-lock-fontified t)) "org demot" #("%s" 0 1 (composition nil face (font-lock-string-face org-block) font-lock-multiline t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t fontified t) 1 2 (composition nil face (font-lock-string-face org-block) font-lock-multiline t src-block t prettify-symbols-end nil prettify-symbols-start nil help-echo nil font-lock-fontified t fontified t)) "emacs re" "find function" "function point" "yas insert" "ema" "mz" "org drill" "org capture" "emacs rel" "eval" "find v" "find fu" "find function" #("file+header" 0 4 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 4 5 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 5 6 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 6 7 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 7 8 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 8 9 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 9 10 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil) 10 11 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil)) #("$" 0 1 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) #("file" 0 4 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil fontified t src-block t font-lock-multiline t face (org-block) composition nil)) #("Vocabulary" 0 1 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 1 2 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 2 3 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 3 4 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 4 5 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 5 6 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 6 7 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 7 8 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 8 9 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil) 9 10 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) #("PROPERTIES" 0 10 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (font-lock-string-face org-block) composition nil)) "emacs-re" "print pa" "list" "list pa" #("org-file-path" 0 13 (font-lock-fontified t help-echo nil prettify-symbols-start nil prettify-symbols-end nil src-block t fontified t font-lock-multiline t face (org-block) composition nil)) "expand region" "zone" "irc"))
(setq org-drill-sm5-optimal-factor-matrix '((1 (2.5 . 4.0) (2.6 . 4.07))))
